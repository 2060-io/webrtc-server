apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap.name }}
  namespace: {{ .Values.namespace }}
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        keepalive_timeout  65;

        include /etc/nginx/conf.d/*.conf;
    }

  default.conf: |
    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;

        
    location / {
        root /usr/share/nginx/html;
        index index.html;

        if ($query_string = "") {
            return 302 /?domain={{ .Values.configMap.serverName }}&protooPort={{ .Values.configMap.protooPort }};
        }
       
        set $query $query_string;
        if ($query_string !~* "domain=") {
            set $query "${query}&domain={{ .Values.configMap.serverName }}";
        }
        if ($query_string !~* "protooPort=") {
            set $query "${query}&protooPort=443";
        }
       
        if ($query != $query_string) {
            return 302 $scheme://$host$uri?$query;
        }
       
        try_files $uri $uri/ /index.html;
    }
    }


---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Values.deployment.labels.app }}
  ports:
    - name: https
      port: {{ .Values.service.ports.https }}
      protocol: TCP
      targetPort: 443

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.ingress.name }}
  namespace: {{ .Values.namespace }}
  annotations:
{{ toYaml .Values.ingress.annotations | indent 4 }}
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.ingress.host }}
      secretName: {{ .Values.ingress.tlsSecretName }}
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Values.service.name }}
                port:
                  number: {{ .Values.service.ports.https }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.deployment.labels.app }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.labels.app }}
  template:
    metadata:
      labels:
        app: {{ .Values.deployment.labels.app }}
    spec:
      containers:
        - name: {{ .Values.deployment.name }}
          image: io2060/webrtc-webclient:dev
          imagePullPolicy: "{{ .Values.deployment.pullPolicy }}"
          ports:
            - containerPort: 443
          volumeMounts:
            - name: tls-certificates
              mountPath: /etc/ssl/certs/fullchain.pem
              subPath: tls.crt
            - name: tls-certificates
              mountPath: /etc/ssl/private/privkey.pem
              subPath: tls.key
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-default
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          resources:
            limits:
              memory: {{ .Values.deployment.resources.limits.memory }}
              cpu: {{ .Values.deployment.resources.limits.cpu }}
            requests:
              memory: {{ .Values.deployment.resources.requests.memory }}
              cpu: {{ .Values.deployment.resources.requests.cpu }}
      volumes:
        - name: tls-certificates
          secret:
            secretName: {{ .Values.secret.name }}
        - name: nginx-config
          configMap:
            name: {{ .Values.configMap.name }}
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: nginx-default
          configMap:
            name: {{ .Values.configMap.name }}
            items:
              - key: default.conf
                path: default.conf
      imagePullSecrets:
        - name: registry-credentials
      restartPolicy: Always

