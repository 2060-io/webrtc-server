apiVersion: v1
kind: Service
metadata:
  name:  {{ .Values.service.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: {{ .Values.app.name }}
  ports:
    - name: http
      port: {{ .Values.service.ports.http }}
      protocol: TCP
      targetPort: 3001
    {{- if .Values.appCheckProxy.enabled }}
    - name: app-check
      protocol: TCP
      port: {{ .Values.service.ports.appCheck }}
      targetPort: 3100
    {{- end }}
---
{{- if .Values.appCheckProxy.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appCheckProxy.configMap.name }}
  namespace: {{ .Release.Namespace }}
data:
  ENDPOINT_URLS: |-
    {{- tpl .Values.appCheckProxy.configMap.endpointUrls . | nindent 4 }}
{{- end }}
---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{.Values.ingress.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ tpl .Values.ingress.host . }}
      secretName: {{ tpl .Values.ingress.tlsSecret . }}
  rules:
    - host: {{ tpl .Values.ingress.host . }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Values.service.name }}
                port:
                  number: {{ ternary .Values.service.ports.appCheck .Values.service.ports.http .Values.appCheckProxy.enabled }}
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.statefulset.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.statefulset.serviceName }}
  replicas: {{ .Values.statefulset.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      containers:
        - name: {{ .Values.statefulset.containerName }}
          image: io2060/webrtc-load-balancer:{{ .Chart.Version }}
          imagePullPolicy: {{ .Values.statefulset.pullPolicy }}
          resources:
            {{- toYaml .Values.statefulset.resources.webrtcLoadbalancer | nindent 12 }}
          env:
            {{- range $key, $val := .Values.statefulset.env }}
            - name: {{ $key }}
              value: {{ tpl $val $ | quote }}
            {{- end }}
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 3001
              name: https
              protocol: TCP
        {{- if .Values.appCheckProxy.enabled }}
        - name: {{ .Values.appCheckProxy.name }}
          image: io2060/app-check-proxy:v1.0.0
          securityContext:
            readOnlyRootFilesystem: false
          imagePullPolicy: {{ .Values.appCheckProxy.pullPolicy }}
          resources:
            {{- toYaml .Values.appCheckProxy.resources | nindent 12 }}
          env:
            {{- range $key, $val := .Values.appCheckProxy.env }}
            - name: {{ $key }}
              value: {{ tpl $val $ | quote }}
            {{- end }}
            - name: ENDPOINT_URLS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.appCheckProxy.configMap.name }}
                  key: {{ .Values.appCheckProxy.configMap.key }}
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: firebase-config-volume
              mountPath: /config
              readOnly: false
        {{- end }}
      volumes:
        {{- if .Values.appCheckProxy.enabled }}
        - name: firebase-config-volume
          configMap:
            name: firebase-config
        {{- end }}